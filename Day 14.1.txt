1061. Lexicographically Smallest Equivalent String (Medium)

You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'.
Symmetry: 'a' == 'b' implies 'b' == 'a'.
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
For example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and "aab" is the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.

 

Example 1:

Input: s1 = "parker", s2 = "morris", baseStr = "parser"
Output: "makkek"
Explanation: Based on the equivalency information in s1 and s2, we can group their characters as [m,p], [a,o], [k,r,s], [e,i].
The characters in each group are equivalent and sorted in lexicographical order.
So the answer is "makkek".

Code:

class Solution 
{
    public String smallestEquivalentString(String s1, String s2, String baseStr) 
    {
        int[] graph = new int[26];
        for(int i = 0; i < 26; i++) 
            graph[i] = i;
            
        for(int i = 0; i < s1.length(); i++) 
        {
            int first = s1.charAt(i) - 'a';
            int second = s2.charAt(i) - 'a';
            int end1 = find(graph, first);
            int end2 = find(graph, second);
            if(end1 < end2) 
            {
                graph[end2] = end1;
            } 
            else 
            {
                graph[end1] = end2;
            }
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < baseStr.length(); i++) 
        {
            char c = baseStr.charAt(i);
            sb.append((char)('a' + find(graph, c - 'a')));
        }
        return sb.toString();
    }
    
    private int find(int[] graph, int index) 
    {
        while(graph[index] != index) 
        {
            index = graph[index];
        }
        return index;
    }
}