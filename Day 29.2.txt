61. Rotate List (Medium)

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Code :

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null || k==0)
        return head;
        ListNode ptr1=head;
        ListNode ptr2=head;
        ListNode ptr3=head;
        int n=0;
        while(ptr1!=null){
            n++;
            if(ptr1.next==null)
            ptr2=ptr1;
            ptr1=ptr1.next;
        }
        if(k%n==0 && k!=1)
        return head;
        k=k%n;
        int c=0;
        ptr1=head;
        while(ptr1!=null){
            c++;
            if(n-k==c){
                ptr3=ptr1;
                break;
            }
            ptr1=ptr1.next;
        }
        ListNode ans=ptr3.next;
        ptr3.next=null;
        ptr2.next=head;
        return ans;
    }
}