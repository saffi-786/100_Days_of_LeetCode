445. Add Two Numbers II (Medium)


You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

Code :

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        Stack<Integer> s1=new Stack<>();
        Stack<Integer> s2=new Stack<>();
        while(l1!=null){
            s1.push(l1.val);
            l1=l1.next;
        }
        while(l2!=null){
            s2.push(l2.val);
            l2=l2.next;
        }
        ListNode ans=null;
        int r=0;
        while(!s1.isEmpty() && !s2.isEmpty()){
            int d=s1.pop()+s2.pop()+r;
            r=d/10;
            ListNode ptr=new ListNode(d%10);
            ptr.next=ans;
            ans=ptr;
        }
        while(!s1.isEmpty()){
            int d=s1.pop()+r;
            r=d/10;
            ListNode ptr=new ListNode(d%10);
            ptr.next=ans;
            ans=ptr;
        }
        while(!s2.isEmpty()){
            int d=s2.pop()+r;
            r=d/10;
            ListNode ptr=new ListNode(d%10);
            ptr.next=ans;
            ans=ptr;
        }
        while(r!=0){
            int d=r%10;
            r/=10;
            ListNode ptr=new ListNode(d);
            ptr.next=ans;
            ans=ptr;
        }
        return ans;
    } 
}