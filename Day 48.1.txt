783. Minimum Distance Between BST Nodes (Easy)

Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

 

Example 1:


Input: root = [4,2,6,1,3]
Output: 1

Code :

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDiffInBST(TreeNode root) {
        ArrayList<Integer> a=new ArrayList<>();
        solve(root,a);
        int min=Integer.MAX_VALUE;
        Collections.sort(a);
        for(int i=0;i<a.size()-1;i++){
            min=Math.min(min,Math.abs(a.get(i)-a.get(i+1)));
        }
        return min;
    }
    static void solve(TreeNode root, ArrayList<Integer> a){
        if(root==null)
    return;

    a.add(root.val);

    solve(root.left,a);
    solve(root.right,a);
    }
}